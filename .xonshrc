# XONSH WEBCONFIG START
from xonsh.tools import register_custom_style
mystyle = {
"RED": "#e74c3c",
"BLUE": "#51afef",
"CYAN": "#1abc9c",
"BLACK": "#21272e",
"GREEN":"#53df83",
"PURPLE": "#C5A3FF",
"YELLOW":"#ECBE7B",
"DEFAULT":"#f8f8f0",
"WHITE": "#f8f8f0",
"INTENSE_CYAN":"#1abc9c",
}
register_custom_style("mystyle", mystyle, base="fruity")
$XONSH_COLOR_STYLE="rose-pine-moon"
# $XONSH_COLOR_STYLE="inkpot"
# $XONSH_COLOR_STYLE="lovelace"
# $XONSH_COLOR_STYLE="rainbow_dash"



source-zsh "~/.zshrc"
$PROMPT = '{BOLD_RED}{user}@A.R.T 🏳️‍⚧️ {BOLD_INTENSE_RED}{cwd}{env_name: {}}{#FCF434}❯{#FFFFFF}❯{#9C59D1}❯{INTENSE_BLACK}❯{RESET}'
# $XONSH_COLOR_STYLE = 'inkpot'
# XONSH WEBCONFIG END
$COMMANDS_CACHE_SIZE_WARNING='10000'
# XONSH WIZARD START
# setopt AUTO_CD
$AUTO_CD = True
$AUTO_PUSHD = True
$CDPATH=("$HOME/d" ,"$HOME/d/fa22", "$HOME/d/*")
$AUTO_SUGGEST = True
$AUTO_SUGGEST_IN_COMPLETIONS = '1'
$CASE_SENSITIVE_COMPLETIONS = '1'
$COLOR_INPUT = True
$COLOR_RESULTS = '1'
$COMPLETIONS_BRACKETS = '1'
$COMPLETIONS_CONFIRM = '1'
$COMPLETIONS_DISPLAY = 'multi'
$COMPLETIONS_MENU_ROWS = '5'
$COMPLETION_IN_THREAD = '1'
$COMPLETION_QUERY_LIMIT = '25'
$DIRSTACK_SIZE = '20'
$DOTGLOB = ''
$DYNAMIC_CWD_ELISION_CHAR = '...'
$EXPAND_ENV_VARS = '1'
$FOREIGN_ALIASES_OVERRIDE = ''
$FOREIGN_ALIASES_SUPPRESS_SKIP_MESSAGE = '1'
$FUZZY_PATH_COMPLETION = '1'
$GLOB_SORTED = '1'
$IGNOREEOF = ''
$INDENT = '    '
$MULTILINE_PROMPT = '..'
$PATHEXT = 'APPIMAGE'
$PRETTY_PRINT_RESULTS = '1'
#$PROMPT = '{BLUE}{cwd} $ '
$THREAD_SUBPROCS = '1'
$XONSH_AUTOPAIR = True
# $XONSH_COLOR_STYLE = "native"
# $XONSH_SHOW_TRACEBACK = True
$XONSH_HISTORY_SIZE=131072


# xontrib load coreutils whole_word_jumping z  gitinfo jedi vox autovox argcomplete django
xontrib load bashisms coreutils whole_word_jumping vox autovox jedi
# xontrib load coreutils

# xontrib load powerline2

# xontrib load pyenv

# cd ~/apps/5e-srd-api && docker compose up --build -d



# XONSH WIZARD END

# if "eterm" not in $TERM:
#	 xontrib load powerline

aliases['nemohere']="nemo @($(pwd).strip()) . &"
aliases['nemosu']="sudo nemo @($(pwd).strip())"
aliases['cat']='bat'
aliases['bg']='batgrep'
aliases["newdoom"]="doom sync && systemctl restart --user emacs && e"

import sys
import random
from random import randint
fortune

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
# if !(test -f "/home/vivien/miniconda3/bin/conda"):
#     import sys as _sys
#     from types import ModuleType as _ModuleType
#     _mod = _ModuleType("xontrib.conda",
#                     "Autogenerated from $(/home/vivien/miniconda3/bin/conda shell.xonsh hook)")
#     __xonsh__.execer.exec($("/home/vivien/miniconda3/bin/conda" "shell.xonsh" "hook"),
#                         glbs=_mod.__dict__,
#                         filename="$(/home/vivien/miniconda3/bin/conda shell.xonsh hook)")
#     _sys.modules["xontrib.conda"] = _mod
#     del _sys, _mod, _ModuleType
# # <<< conda initialize <<<

# conda deactivate
@events.autovox_policy
def dotvenv_policy(path, **_):
    venv = path / '.venv'
    if venv.exists():
        return venv
